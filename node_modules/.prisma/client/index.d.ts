
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model typesusers
 * 
 */
export type typesusers = {
  typeuser_id: number
  typeuser: string | null
}

/**
 * Model users
 * 
 */
export type users = {
  user_id: number
  name: string | null
  password: string | null
  typeuser_id: number | null
  email: string | null
  active: number | null
}

/**
 * Model clientes
 * 
 */
export type clientes = {
  cliente_id: number
  nombre: string
  apellidos: string | null
  telefono: string | null
  email: string | null
  user_id: number | null
  fecha: Date | null
  activo: number | null
}

/**
 * Model status
 * 
 */
export type status = {
  status_id: number
  status: string | null
}

/**
 * Model ordenespagos
 * 
 */
export type ordenespagos = {
  orden_pago_id: number
  cliente_id: number
  monto: number
  codigo_web: string | null
  status_id: number | null
  customer: string | null
  order_id: string | null
  openpay_id: string | null
  fecha: Date | null
  fechapago: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Typesusers
 * const typesusers = await prisma.typesusers.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Typesusers
   * const typesusers = await prisma.typesusers.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.typesusers`: Exposes CRUD operations for the **typesusers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Typesusers
    * const typesusers = await prisma.typesusers.findMany()
    * ```
    */
  get typesusers(): Prisma.typesusersDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.clientes`: Exposes CRUD operations for the **clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.clientesDelegate<GlobalReject>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.statusDelegate<GlobalReject>;

  /**
   * `prisma.ordenespagos`: Exposes CRUD operations for the **ordenespagos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ordenespagos
    * const ordenespagos = await prisma.ordenespagos.findMany()
    * ```
    */
  get ordenespagos(): Prisma.ordenespagosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    typesusers: 'typesusers',
    users: 'users',
    clientes: 'clientes',
    status: 'status',
    ordenespagos: 'ordenespagos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TypesusersCountOutputType
   */


  export type TypesusersCountOutputType = {
    users: number
  }

  export type TypesusersCountOutputTypeSelect = {
    users?: boolean
  }

  export type TypesusersCountOutputTypeGetPayload<S extends boolean | null | undefined | TypesusersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypesusersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TypesusersCountOutputTypeArgs)
    ? TypesusersCountOutputType 
    : S extends { select: any } & (TypesusersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TypesusersCountOutputType ? TypesusersCountOutputType[P] : never
  } 
      : TypesusersCountOutputType




  // Custom InputTypes

  /**
   * TypesusersCountOutputType without action
   */
  export type TypesusersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TypesusersCountOutputType
     */
    select?: TypesusersCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    clientes: number
  }

  export type UsersCountOutputTypeSelect = {
    clientes?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ClientesCountOutputType
   */


  export type ClientesCountOutputType = {
    ordenespagos: number
  }

  export type ClientesCountOutputTypeSelect = {
    ordenespagos?: boolean
  }

  export type ClientesCountOutputTypeGetPayload<S extends boolean | null | undefined | ClientesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClientesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClientesCountOutputTypeArgs)
    ? ClientesCountOutputType 
    : S extends { select: any } & (ClientesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClientesCountOutputType ? ClientesCountOutputType[P] : never
  } 
      : ClientesCountOutputType




  // Custom InputTypes

  /**
   * ClientesCountOutputType without action
   */
  export type ClientesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientesCountOutputType
     */
    select?: ClientesCountOutputTypeSelect | null
  }



  /**
   * Count Type StatusCountOutputType
   */


  export type StatusCountOutputType = {
    ordenespagos: number
  }

  export type StatusCountOutputTypeSelect = {
    ordenespagos?: boolean
  }

  export type StatusCountOutputTypeGetPayload<S extends boolean | null | undefined | StatusCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? StatusCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (StatusCountOutputTypeArgs)
    ? StatusCountOutputType 
    : S extends { select: any } & (StatusCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof StatusCountOutputType ? StatusCountOutputType[P] : never
  } 
      : StatusCountOutputType




  // Custom InputTypes

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model typesusers
   */


  export type AggregateTypesusers = {
    _count: TypesusersCountAggregateOutputType | null
    _avg: TypesusersAvgAggregateOutputType | null
    _sum: TypesusersSumAggregateOutputType | null
    _min: TypesusersMinAggregateOutputType | null
    _max: TypesusersMaxAggregateOutputType | null
  }

  export type TypesusersAvgAggregateOutputType = {
    typeuser_id: number | null
  }

  export type TypesusersSumAggregateOutputType = {
    typeuser_id: number | null
  }

  export type TypesusersMinAggregateOutputType = {
    typeuser_id: number | null
    typeuser: string | null
  }

  export type TypesusersMaxAggregateOutputType = {
    typeuser_id: number | null
    typeuser: string | null
  }

  export type TypesusersCountAggregateOutputType = {
    typeuser_id: number
    typeuser: number
    _all: number
  }


  export type TypesusersAvgAggregateInputType = {
    typeuser_id?: true
  }

  export type TypesusersSumAggregateInputType = {
    typeuser_id?: true
  }

  export type TypesusersMinAggregateInputType = {
    typeuser_id?: true
    typeuser?: true
  }

  export type TypesusersMaxAggregateInputType = {
    typeuser_id?: true
    typeuser?: true
  }

  export type TypesusersCountAggregateInputType = {
    typeuser_id?: true
    typeuser?: true
    _all?: true
  }

  export type TypesusersAggregateArgs = {
    /**
     * Filter which typesusers to aggregate.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: Enumerable<typesusersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned typesusers
    **/
    _count?: true | TypesusersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypesusersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypesusersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypesusersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypesusersMaxAggregateInputType
  }

  export type GetTypesusersAggregateType<T extends TypesusersAggregateArgs> = {
        [P in keyof T & keyof AggregateTypesusers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypesusers[P]>
      : GetScalarType<T[P], AggregateTypesusers[P]>
  }




  export type TypesusersGroupByArgs = {
    where?: typesusersWhereInput
    orderBy?: Enumerable<typesusersOrderByWithAggregationInput>
    by: TypesusersScalarFieldEnum[]
    having?: typesusersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypesusersCountAggregateInputType | true
    _avg?: TypesusersAvgAggregateInputType
    _sum?: TypesusersSumAggregateInputType
    _min?: TypesusersMinAggregateInputType
    _max?: TypesusersMaxAggregateInputType
  }


  export type TypesusersGroupByOutputType = {
    typeuser_id: number
    typeuser: string | null
    _count: TypesusersCountAggregateOutputType | null
    _avg: TypesusersAvgAggregateOutputType | null
    _sum: TypesusersSumAggregateOutputType | null
    _min: TypesusersMinAggregateOutputType | null
    _max: TypesusersMaxAggregateOutputType | null
  }

  type GetTypesusersGroupByPayload<T extends TypesusersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TypesusersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypesusersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypesusersGroupByOutputType[P]>
            : GetScalarType<T[P], TypesusersGroupByOutputType[P]>
        }
      >
    >


  export type typesusersSelect = {
    typeuser_id?: boolean
    typeuser?: boolean
    users?: boolean | typesusers$usersArgs
    _count?: boolean | TypesusersCountOutputTypeArgs
  }


  export type typesusersInclude = {
    users?: boolean | typesusers$usersArgs
    _count?: boolean | TypesusersCountOutputTypeArgs
  }

  export type typesusersGetPayload<S extends boolean | null | undefined | typesusersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? typesusers :
    S extends undefined ? never :
    S extends { include: any } & (typesusersArgs | typesusersFindManyArgs)
    ? typesusers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? Array < usersGetPayload<S['include'][P]>>  :
        P extends '_count' ? TypesusersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (typesusersArgs | typesusersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? Array < usersGetPayload<S['select'][P]>>  :
        P extends '_count' ? TypesusersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof typesusers ? typesusers[P] : never
  } 
      : typesusers


  type typesusersCountArgs = 
    Omit<typesusersFindManyArgs, 'select' | 'include'> & {
      select?: TypesusersCountAggregateInputType | true
    }

  export interface typesusersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Typesusers that matches the filter.
     * @param {typesusersFindUniqueArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends typesusersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, typesusersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'typesusers'> extends True ? Prisma__typesusersClient<typesusersGetPayload<T>> : Prisma__typesusersClient<typesusersGetPayload<T> | null, null>

    /**
     * Find one Typesusers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {typesusersFindUniqueOrThrowArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends typesusersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, typesusersFindUniqueOrThrowArgs>
    ): Prisma__typesusersClient<typesusersGetPayload<T>>

    /**
     * Find the first Typesusers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersFindFirstArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends typesusersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, typesusersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'typesusers'> extends True ? Prisma__typesusersClient<typesusersGetPayload<T>> : Prisma__typesusersClient<typesusersGetPayload<T> | null, null>

    /**
     * Find the first Typesusers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersFindFirstOrThrowArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends typesusersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, typesusersFindFirstOrThrowArgs>
    ): Prisma__typesusersClient<typesusersGetPayload<T>>

    /**
     * Find zero or more Typesusers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Typesusers
     * const typesusers = await prisma.typesusers.findMany()
     * 
     * // Get first 10 Typesusers
     * const typesusers = await prisma.typesusers.findMany({ take: 10 })
     * 
     * // Only select the `typeuser_id`
     * const typesusersWithTypeuser_idOnly = await prisma.typesusers.findMany({ select: { typeuser_id: true } })
     * 
    **/
    findMany<T extends typesusersFindManyArgs>(
      args?: SelectSubset<T, typesusersFindManyArgs>
    ): Prisma.PrismaPromise<Array<typesusersGetPayload<T>>>

    /**
     * Create a Typesusers.
     * @param {typesusersCreateArgs} args - Arguments to create a Typesusers.
     * @example
     * // Create one Typesusers
     * const Typesusers = await prisma.typesusers.create({
     *   data: {
     *     // ... data to create a Typesusers
     *   }
     * })
     * 
    **/
    create<T extends typesusersCreateArgs>(
      args: SelectSubset<T, typesusersCreateArgs>
    ): Prisma__typesusersClient<typesusersGetPayload<T>>

    /**
     * Create many Typesusers.
     *     @param {typesusersCreateManyArgs} args - Arguments to create many Typesusers.
     *     @example
     *     // Create many Typesusers
     *     const typesusers = await prisma.typesusers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends typesusersCreateManyArgs>(
      args?: SelectSubset<T, typesusersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Typesusers.
     * @param {typesusersDeleteArgs} args - Arguments to delete one Typesusers.
     * @example
     * // Delete one Typesusers
     * const Typesusers = await prisma.typesusers.delete({
     *   where: {
     *     // ... filter to delete one Typesusers
     *   }
     * })
     * 
    **/
    delete<T extends typesusersDeleteArgs>(
      args: SelectSubset<T, typesusersDeleteArgs>
    ): Prisma__typesusersClient<typesusersGetPayload<T>>

    /**
     * Update one Typesusers.
     * @param {typesusersUpdateArgs} args - Arguments to update one Typesusers.
     * @example
     * // Update one Typesusers
     * const typesusers = await prisma.typesusers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends typesusersUpdateArgs>(
      args: SelectSubset<T, typesusersUpdateArgs>
    ): Prisma__typesusersClient<typesusersGetPayload<T>>

    /**
     * Delete zero or more Typesusers.
     * @param {typesusersDeleteManyArgs} args - Arguments to filter Typesusers to delete.
     * @example
     * // Delete a few Typesusers
     * const { count } = await prisma.typesusers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends typesusersDeleteManyArgs>(
      args?: SelectSubset<T, typesusersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Typesusers
     * const typesusers = await prisma.typesusers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends typesusersUpdateManyArgs>(
      args: SelectSubset<T, typesusersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Typesusers.
     * @param {typesusersUpsertArgs} args - Arguments to update or create a Typesusers.
     * @example
     * // Update or create a Typesusers
     * const typesusers = await prisma.typesusers.upsert({
     *   create: {
     *     // ... data to create a Typesusers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Typesusers we want to update
     *   }
     * })
    **/
    upsert<T extends typesusersUpsertArgs>(
      args: SelectSubset<T, typesusersUpsertArgs>
    ): Prisma__typesusersClient<typesusersGetPayload<T>>

    /**
     * Count the number of Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersCountArgs} args - Arguments to filter Typesusers to count.
     * @example
     * // Count the number of Typesusers
     * const count = await prisma.typesusers.count({
     *   where: {
     *     // ... the filter for the Typesusers we want to count
     *   }
     * })
    **/
    count<T extends typesusersCountArgs>(
      args?: Subset<T, typesusersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypesusersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypesusersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypesusersAggregateArgs>(args: Subset<T, TypesusersAggregateArgs>): Prisma.PrismaPromise<GetTypesusersAggregateType<T>>

    /**
     * Group by Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypesusersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypesusersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypesusersGroupByArgs['orderBy'] }
        : { orderBy?: TypesusersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypesusersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypesusersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for typesusers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__typesusersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends typesusers$usersArgs= {}>(args?: Subset<T, typesusers$usersArgs>): Prisma.PrismaPromise<Array<usersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * typesusers base type for findUnique actions
   */
  export type typesusersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * Filter, which typesusers to fetch.
     */
    where: typesusersWhereUniqueInput
  }

  /**
   * typesusers findUnique
   */
  export interface typesusersFindUniqueArgs extends typesusersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * typesusers findUniqueOrThrow
   */
  export type typesusersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * Filter, which typesusers to fetch.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers base type for findFirst actions
   */
  export type typesusersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * Filter, which typesusers to fetch.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: Enumerable<typesusersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for typesusers.
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of typesusers.
     */
    distinct?: Enumerable<TypesusersScalarFieldEnum>
  }

  /**
   * typesusers findFirst
   */
  export interface typesusersFindFirstArgs extends typesusersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * typesusers findFirstOrThrow
   */
  export type typesusersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * Filter, which typesusers to fetch.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: Enumerable<typesusersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for typesusers.
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of typesusers.
     */
    distinct?: Enumerable<TypesusersScalarFieldEnum>
  }


  /**
   * typesusers findMany
   */
  export type typesusersFindManyArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * Filter, which typesusers to fetch.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: Enumerable<typesusersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing typesusers.
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    distinct?: Enumerable<TypesusersScalarFieldEnum>
  }


  /**
   * typesusers create
   */
  export type typesusersCreateArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * The data needed to create a typesusers.
     */
    data: XOR<typesusersCreateInput, typesusersUncheckedCreateInput>
  }


  /**
   * typesusers createMany
   */
  export type typesusersCreateManyArgs = {
    /**
     * The data used to create many typesusers.
     */
    data: Enumerable<typesusersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * typesusers update
   */
  export type typesusersUpdateArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * The data needed to update a typesusers.
     */
    data: XOR<typesusersUpdateInput, typesusersUncheckedUpdateInput>
    /**
     * Choose, which typesusers to update.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers updateMany
   */
  export type typesusersUpdateManyArgs = {
    /**
     * The data used to update typesusers.
     */
    data: XOR<typesusersUpdateManyMutationInput, typesusersUncheckedUpdateManyInput>
    /**
     * Filter which typesusers to update
     */
    where?: typesusersWhereInput
  }


  /**
   * typesusers upsert
   */
  export type typesusersUpsertArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * The filter to search for the typesusers to update in case it exists.
     */
    where: typesusersWhereUniqueInput
    /**
     * In case the typesusers found by the `where` argument doesn't exist, create a new typesusers with this data.
     */
    create: XOR<typesusersCreateInput, typesusersUncheckedCreateInput>
    /**
     * In case the typesusers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<typesusersUpdateInput, typesusersUncheckedUpdateInput>
  }


  /**
   * typesusers delete
   */
  export type typesusersDeleteArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
    /**
     * Filter which typesusers to delete.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers deleteMany
   */
  export type typesusersDeleteManyArgs = {
    /**
     * Filter which typesusers to delete
     */
    where?: typesusersWhereInput
  }


  /**
   * typesusers.users
   */
  export type typesusers$usersArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * typesusers without action
   */
  export type typesusersArgs = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
    typeuser_id: number | null
    active: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
    typeuser_id: number | null
    active: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    name: string | null
    password: string | null
    typeuser_id: number | null
    email: string | null
    active: number | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    name: string | null
    password: string | null
    typeuser_id: number | null
    email: string | null
    active: number | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    name: number
    password: number
    typeuser_id: number
    email: number
    active: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
    typeuser_id?: true
    active?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
    typeuser_id?: true
    active?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    name?: true
    password?: true
    typeuser_id?: true
    email?: true
    active?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    name?: true
    password?: true
    typeuser_id?: true
    email?: true
    active?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    name?: true
    password?: true
    typeuser_id?: true
    email?: true
    active?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    user_id: number
    name: string | null
    password: string | null
    typeuser_id: number | null
    email: string | null
    active: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    user_id?: boolean
    name?: boolean
    password?: boolean
    typeuser_id?: boolean
    email?: boolean
    active?: boolean
    clientes?: boolean | users$clientesArgs
    typesusers?: boolean | typesusersArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    clientes?: boolean | users$clientesArgs
    typesusers?: boolean | typesusersArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'clientes' ? Array < clientesGetPayload<S['include'][P]>>  :
        P extends 'typesusers' ? typesusersGetPayload<S['include'][P]> | null :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'clientes' ? Array < clientesGetPayload<S['select'][P]>>  :
        P extends 'typesusers' ? typesusersGetPayload<S['select'][P]> | null :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): Prisma.PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    clientes<T extends users$clientesArgs= {}>(args?: Subset<T, users$clientesArgs>): Prisma.PrismaPromise<Array<clientesGetPayload<T>>| Null>;

    typesusers<T extends typesusersArgs= {}>(args?: Subset<T, typesusersArgs>): Prisma__typesusersClient<typesusersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.clientes
   */
  export type users$clientesArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    where?: clientesWhereInput
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    cursor?: clientesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
  }



  /**
   * Model clientes
   */


  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    cliente_id: number | null
    user_id: number | null
    activo: number | null
  }

  export type ClientesSumAggregateOutputType = {
    cliente_id: number | null
    user_id: number | null
    activo: number | null
  }

  export type ClientesMinAggregateOutputType = {
    cliente_id: number | null
    nombre: string | null
    apellidos: string | null
    telefono: string | null
    email: string | null
    user_id: number | null
    fecha: Date | null
    activo: number | null
  }

  export type ClientesMaxAggregateOutputType = {
    cliente_id: number | null
    nombre: string | null
    apellidos: string | null
    telefono: string | null
    email: string | null
    user_id: number | null
    fecha: Date | null
    activo: number | null
  }

  export type ClientesCountAggregateOutputType = {
    cliente_id: number
    nombre: number
    apellidos: number
    telefono: number
    email: number
    user_id: number
    fecha: number
    activo: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    cliente_id?: true
    user_id?: true
    activo?: true
  }

  export type ClientesSumAggregateInputType = {
    cliente_id?: true
    user_id?: true
    activo?: true
  }

  export type ClientesMinAggregateInputType = {
    cliente_id?: true
    nombre?: true
    apellidos?: true
    telefono?: true
    email?: true
    user_id?: true
    fecha?: true
    activo?: true
  }

  export type ClientesMaxAggregateInputType = {
    cliente_id?: true
    nombre?: true
    apellidos?: true
    telefono?: true
    email?: true
    user_id?: true
    fecha?: true
    activo?: true
  }

  export type ClientesCountAggregateInputType = {
    cliente_id?: true
    nombre?: true
    apellidos?: true
    telefono?: true
    email?: true
    user_id?: true
    fecha?: true
    activo?: true
    _all?: true
  }

  export type ClientesAggregateArgs = {
    /**
     * Filter which clientes to aggregate.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type ClientesGroupByArgs = {
    where?: clientesWhereInput
    orderBy?: Enumerable<clientesOrderByWithAggregationInput>
    by: ClientesScalarFieldEnum[]
    having?: clientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }


  export type ClientesGroupByOutputType = {
    cliente_id: number
    nombre: string
    apellidos: string | null
    telefono: string | null
    email: string | null
    user_id: number | null
    fecha: Date | null
    activo: number | null
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends ClientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type clientesSelect = {
    cliente_id?: boolean
    nombre?: boolean
    apellidos?: boolean
    telefono?: boolean
    email?: boolean
    user_id?: boolean
    fecha?: boolean
    activo?: boolean
    ordenespagos?: boolean | clientes$ordenespagosArgs
    users?: boolean | usersArgs
    _count?: boolean | ClientesCountOutputTypeArgs
  }


  export type clientesInclude = {
    ordenespagos?: boolean | clientes$ordenespagosArgs
    users?: boolean | usersArgs
    _count?: boolean | ClientesCountOutputTypeArgs
  }

  export type clientesGetPayload<S extends boolean | null | undefined | clientesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? clientes :
    S extends undefined ? never :
    S extends { include: any } & (clientesArgs | clientesFindManyArgs)
    ? clientes  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ordenespagos' ? Array < ordenespagosGetPayload<S['include'][P]>>  :
        P extends 'users' ? usersGetPayload<S['include'][P]> | null :
        P extends '_count' ? ClientesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (clientesArgs | clientesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ordenespagos' ? Array < ordenespagosGetPayload<S['select'][P]>>  :
        P extends 'users' ? usersGetPayload<S['select'][P]> | null :
        P extends '_count' ? ClientesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof clientes ? clientes[P] : never
  } 
      : clientes


  type clientesCountArgs = 
    Omit<clientesFindManyArgs, 'select' | 'include'> & {
      select?: ClientesCountAggregateInputType | true
    }

  export interface clientesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Clientes that matches the filter.
     * @param {clientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clientes'> extends True ? Prisma__clientesClient<clientesGetPayload<T>> : Prisma__clientesClient<clientesGetPayload<T> | null, null>

    /**
     * Find one Clientes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clientesFindUniqueOrThrowArgs>
    ): Prisma__clientesClient<clientesGetPayload<T>>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clientes'> extends True ? Prisma__clientesClient<clientesGetPayload<T>> : Prisma__clientesClient<clientesGetPayload<T> | null, null>

    /**
     * Find the first Clientes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clientesFindFirstOrThrowArgs>
    ): Prisma__clientesClient<clientesGetPayload<T>>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `cliente_id`
     * const clientesWithCliente_idOnly = await prisma.clientes.findMany({ select: { cliente_id: true } })
     * 
    **/
    findMany<T extends clientesFindManyArgs>(
      args?: SelectSubset<T, clientesFindManyArgs>
    ): Prisma.PrismaPromise<Array<clientesGetPayload<T>>>

    /**
     * Create a Clientes.
     * @param {clientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
    **/
    create<T extends clientesCreateArgs>(
      args: SelectSubset<T, clientesCreateArgs>
    ): Prisma__clientesClient<clientesGetPayload<T>>

    /**
     * Create many Clientes.
     *     @param {clientesCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const clientes = await prisma.clientes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientesCreateManyArgs>(
      args?: SelectSubset<T, clientesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {clientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
    **/
    delete<T extends clientesDeleteArgs>(
      args: SelectSubset<T, clientesDeleteArgs>
    ): Prisma__clientesClient<clientesGetPayload<T>>

    /**
     * Update one Clientes.
     * @param {clientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientesUpdateArgs>(
      args: SelectSubset<T, clientesUpdateArgs>
    ): Prisma__clientesClient<clientesGetPayload<T>>

    /**
     * Delete zero or more Clientes.
     * @param {clientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientesDeleteManyArgs>(
      args?: SelectSubset<T, clientesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientesUpdateManyArgs>(
      args: SelectSubset<T, clientesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {clientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
    **/
    upsert<T extends clientesUpsertArgs>(
      args: SelectSubset<T, clientesUpsertArgs>
    ): Prisma__clientesClient<clientesGetPayload<T>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clientesCountArgs>(
      args?: Subset<T, clientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): Prisma.PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientesGroupByArgs['orderBy'] }
        : { orderBy?: ClientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ordenespagos<T extends clientes$ordenespagosArgs= {}>(args?: Subset<T, clientes$ordenespagosArgs>): Prisma.PrismaPromise<Array<ordenespagosGetPayload<T>>| Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * clientes base type for findUnique actions
   */
  export type clientesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes findUnique
   */
  export interface clientesFindUniqueArgs extends clientesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes findUniqueOrThrow
   */
  export type clientesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes base type for findFirst actions
   */
  export type clientesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }

  /**
   * clientes findFirst
   */
  export interface clientesFindFirstArgs extends clientesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes findFirstOrThrow
   */
  export type clientesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * clientes findMany
   */
  export type clientesFindManyArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * clientes create
   */
  export type clientesCreateArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * The data needed to create a clientes.
     */
    data: XOR<clientesCreateInput, clientesUncheckedCreateInput>
  }


  /**
   * clientes createMany
   */
  export type clientesCreateManyArgs = {
    /**
     * The data used to create many clientes.
     */
    data: Enumerable<clientesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clientes update
   */
  export type clientesUpdateArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * The data needed to update a clientes.
     */
    data: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
    /**
     * Choose, which clientes to update.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes updateMany
   */
  export type clientesUpdateManyArgs = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clientesWhereInput
  }


  /**
   * clientes upsert
   */
  export type clientesUpsertArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * The filter to search for the clientes to update in case it exists.
     */
    where: clientesWhereUniqueInput
    /**
     * In case the clientes found by the `where` argument doesn't exist, create a new clientes with this data.
     */
    create: XOR<clientesCreateInput, clientesUncheckedCreateInput>
    /**
     * In case the clientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
  }


  /**
   * clientes delete
   */
  export type clientesDeleteArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
    /**
     * Filter which clientes to delete.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes deleteMany
   */
  export type clientesDeleteManyArgs = {
    /**
     * Filter which clientes to delete
     */
    where?: clientesWhereInput
  }


  /**
   * clientes.ordenespagos
   */
  export type clientes$ordenespagosArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    where?: ordenespagosWhereInput
    orderBy?: Enumerable<ordenespagosOrderByWithRelationInput>
    cursor?: ordenespagosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdenespagosScalarFieldEnum>
  }


  /**
   * clientes without action
   */
  export type clientesArgs = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude | null
  }



  /**
   * Model status
   */


  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    status_id: number | null
  }

  export type StatusSumAggregateOutputType = {
    status_id: number | null
  }

  export type StatusMinAggregateOutputType = {
    status_id: number | null
    status: string | null
  }

  export type StatusMaxAggregateOutputType = {
    status_id: number | null
    status: string | null
  }

  export type StatusCountAggregateOutputType = {
    status_id: number
    status: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    status_id?: true
  }

  export type StatusSumAggregateInputType = {
    status_id?: true
  }

  export type StatusMinAggregateInputType = {
    status_id?: true
    status?: true
  }

  export type StatusMaxAggregateInputType = {
    status_id?: true
    status?: true
  }

  export type StatusCountAggregateInputType = {
    status_id?: true
    status?: true
    _all?: true
  }

  export type StatusAggregateArgs = {
    /**
     * Filter which status to aggregate.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs = {
    where?: statusWhereInput
    orderBy?: Enumerable<statusOrderByWithAggregationInput>
    by: StatusScalarFieldEnum[]
    having?: statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }


  export type StatusGroupByOutputType = {
    status_id: number
    status: string | null
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type statusSelect = {
    status_id?: boolean
    status?: boolean
    ordenespagos?: boolean | status$ordenespagosArgs
    _count?: boolean | StatusCountOutputTypeArgs
  }


  export type statusInclude = {
    ordenespagos?: boolean | status$ordenespagosArgs
    _count?: boolean | StatusCountOutputTypeArgs
  }

  export type statusGetPayload<S extends boolean | null | undefined | statusArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? status :
    S extends undefined ? never :
    S extends { include: any } & (statusArgs | statusFindManyArgs)
    ? status  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ordenespagos' ? Array < ordenespagosGetPayload<S['include'][P]>>  :
        P extends '_count' ? StatusCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (statusArgs | statusFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ordenespagos' ? Array < ordenespagosGetPayload<S['select'][P]>>  :
        P extends '_count' ? StatusCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof status ? status[P] : never
  } 
      : status


  type statusCountArgs = 
    Omit<statusFindManyArgs, 'select' | 'include'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface statusDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Status that matches the filter.
     * @param {statusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'status'> extends True ? Prisma__statusClient<statusGetPayload<T>> : Prisma__statusClient<statusGetPayload<T> | null, null>

    /**
     * Find one Status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {statusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends statusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, statusFindUniqueOrThrowArgs>
    ): Prisma__statusClient<statusGetPayload<T>>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'status'> extends True ? Prisma__statusClient<statusGetPayload<T>> : Prisma__statusClient<statusGetPayload<T> | null, null>

    /**
     * Find the first Status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends statusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, statusFindFirstOrThrowArgs>
    ): Prisma__statusClient<statusGetPayload<T>>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `status_id`
     * const statusWithStatus_idOnly = await prisma.status.findMany({ select: { status_id: true } })
     * 
    **/
    findMany<T extends statusFindManyArgs>(
      args?: SelectSubset<T, statusFindManyArgs>
    ): Prisma.PrismaPromise<Array<statusGetPayload<T>>>

    /**
     * Create a Status.
     * @param {statusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends statusCreateArgs>(
      args: SelectSubset<T, statusCreateArgs>
    ): Prisma__statusClient<statusGetPayload<T>>

    /**
     * Create many Statuses.
     *     @param {statusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends statusCreateManyArgs>(
      args?: SelectSubset<T, statusCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {statusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends statusDeleteArgs>(
      args: SelectSubset<T, statusDeleteArgs>
    ): Prisma__statusClient<statusGetPayload<T>>

    /**
     * Update one Status.
     * @param {statusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends statusUpdateArgs>(
      args: SelectSubset<T, statusUpdateArgs>
    ): Prisma__statusClient<statusGetPayload<T>>

    /**
     * Delete zero or more Statuses.
     * @param {statusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends statusDeleteManyArgs>(
      args?: SelectSubset<T, statusDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends statusUpdateManyArgs>(
      args: SelectSubset<T, statusUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {statusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends statusUpsertArgs>(
      args: SelectSubset<T, statusUpsertArgs>
    ): Prisma__statusClient<statusGetPayload<T>>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends statusCountArgs>(
      args?: Subset<T, statusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__statusClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ordenespagos<T extends status$ordenespagosArgs= {}>(args?: Subset<T, status$ordenespagosArgs>): Prisma.PrismaPromise<Array<ordenespagosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * status base type for findUnique actions
   */
  export type statusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * Filter, which status to fetch.
     */
    where: statusWhereUniqueInput
  }

  /**
   * status findUnique
   */
  export interface statusFindUniqueArgs extends statusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * status findUniqueOrThrow
   */
  export type statusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * Filter, which status to fetch.
     */
    where: statusWhereUniqueInput
  }


  /**
   * status base type for findFirst actions
   */
  export type statusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * Filter, which status to fetch.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     */
    distinct?: Enumerable<StatusScalarFieldEnum>
  }

  /**
   * status findFirst
   */
  export interface statusFindFirstArgs extends statusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * status findFirstOrThrow
   */
  export type statusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * Filter, which status to fetch.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     */
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * status findMany
   */
  export type statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * Filter, which statuses to fetch.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statuses.
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * status create
   */
  export type statusCreateArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * The data needed to create a status.
     */
    data: XOR<statusCreateInput, statusUncheckedCreateInput>
  }


  /**
   * status createMany
   */
  export type statusCreateManyArgs = {
    /**
     * The data used to create many statuses.
     */
    data: Enumerable<statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * status update
   */
  export type statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * The data needed to update a status.
     */
    data: XOR<statusUpdateInput, statusUncheckedUpdateInput>
    /**
     * Choose, which status to update.
     */
    where: statusWhereUniqueInput
  }


  /**
   * status updateMany
   */
  export type statusUpdateManyArgs = {
    /**
     * The data used to update statuses.
     */
    data: XOR<statusUpdateManyMutationInput, statusUncheckedUpdateManyInput>
    /**
     * Filter which statuses to update
     */
    where?: statusWhereInput
  }


  /**
   * status upsert
   */
  export type statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * The filter to search for the status to update in case it exists.
     */
    where: statusWhereUniqueInput
    /**
     * In case the status found by the `where` argument doesn't exist, create a new status with this data.
     */
    create: XOR<statusCreateInput, statusUncheckedCreateInput>
    /**
     * In case the status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusUpdateInput, statusUncheckedUpdateInput>
  }


  /**
   * status delete
   */
  export type statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
    /**
     * Filter which status to delete.
     */
    where: statusWhereUniqueInput
  }


  /**
   * status deleteMany
   */
  export type statusDeleteManyArgs = {
    /**
     * Filter which statuses to delete
     */
    where?: statusWhereInput
  }


  /**
   * status.ordenespagos
   */
  export type status$ordenespagosArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    where?: ordenespagosWhereInput
    orderBy?: Enumerable<ordenespagosOrderByWithRelationInput>
    cursor?: ordenespagosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdenespagosScalarFieldEnum>
  }


  /**
   * status without action
   */
  export type statusArgs = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: statusInclude | null
  }



  /**
   * Model ordenespagos
   */


  export type AggregateOrdenespagos = {
    _count: OrdenespagosCountAggregateOutputType | null
    _avg: OrdenespagosAvgAggregateOutputType | null
    _sum: OrdenespagosSumAggregateOutputType | null
    _min: OrdenespagosMinAggregateOutputType | null
    _max: OrdenespagosMaxAggregateOutputType | null
  }

  export type OrdenespagosAvgAggregateOutputType = {
    orden_pago_id: number | null
    cliente_id: number | null
    monto: number | null
    status_id: number | null
  }

  export type OrdenespagosSumAggregateOutputType = {
    orden_pago_id: number | null
    cliente_id: number | null
    monto: number | null
    status_id: number | null
  }

  export type OrdenespagosMinAggregateOutputType = {
    orden_pago_id: number | null
    cliente_id: number | null
    monto: number | null
    codigo_web: string | null
    status_id: number | null
    customer: string | null
    order_id: string | null
    openpay_id: string | null
    fecha: Date | null
    fechapago: Date | null
  }

  export type OrdenespagosMaxAggregateOutputType = {
    orden_pago_id: number | null
    cliente_id: number | null
    monto: number | null
    codigo_web: string | null
    status_id: number | null
    customer: string | null
    order_id: string | null
    openpay_id: string | null
    fecha: Date | null
    fechapago: Date | null
  }

  export type OrdenespagosCountAggregateOutputType = {
    orden_pago_id: number
    cliente_id: number
    monto: number
    codigo_web: number
    status_id: number
    customer: number
    order_id: number
    openpay_id: number
    fecha: number
    fechapago: number
    _all: number
  }


  export type OrdenespagosAvgAggregateInputType = {
    orden_pago_id?: true
    cliente_id?: true
    monto?: true
    status_id?: true
  }

  export type OrdenespagosSumAggregateInputType = {
    orden_pago_id?: true
    cliente_id?: true
    monto?: true
    status_id?: true
  }

  export type OrdenespagosMinAggregateInputType = {
    orden_pago_id?: true
    cliente_id?: true
    monto?: true
    codigo_web?: true
    status_id?: true
    customer?: true
    order_id?: true
    openpay_id?: true
    fecha?: true
    fechapago?: true
  }

  export type OrdenespagosMaxAggregateInputType = {
    orden_pago_id?: true
    cliente_id?: true
    monto?: true
    codigo_web?: true
    status_id?: true
    customer?: true
    order_id?: true
    openpay_id?: true
    fecha?: true
    fechapago?: true
  }

  export type OrdenespagosCountAggregateInputType = {
    orden_pago_id?: true
    cliente_id?: true
    monto?: true
    codigo_web?: true
    status_id?: true
    customer?: true
    order_id?: true
    openpay_id?: true
    fecha?: true
    fechapago?: true
    _all?: true
  }

  export type OrdenespagosAggregateArgs = {
    /**
     * Filter which ordenespagos to aggregate.
     */
    where?: ordenespagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordenespagos to fetch.
     */
    orderBy?: Enumerable<ordenespagosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordenespagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordenespagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordenespagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ordenespagos
    **/
    _count?: true | OrdenespagosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdenespagosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdenespagosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdenespagosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdenespagosMaxAggregateInputType
  }

  export type GetOrdenespagosAggregateType<T extends OrdenespagosAggregateArgs> = {
        [P in keyof T & keyof AggregateOrdenespagos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrdenespagos[P]>
      : GetScalarType<T[P], AggregateOrdenespagos[P]>
  }




  export type OrdenespagosGroupByArgs = {
    where?: ordenespagosWhereInput
    orderBy?: Enumerable<ordenespagosOrderByWithAggregationInput>
    by: OrdenespagosScalarFieldEnum[]
    having?: ordenespagosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdenespagosCountAggregateInputType | true
    _avg?: OrdenespagosAvgAggregateInputType
    _sum?: OrdenespagosSumAggregateInputType
    _min?: OrdenespagosMinAggregateInputType
    _max?: OrdenespagosMaxAggregateInputType
  }


  export type OrdenespagosGroupByOutputType = {
    orden_pago_id: number
    cliente_id: number
    monto: number
    codigo_web: string | null
    status_id: number | null
    customer: string | null
    order_id: string | null
    openpay_id: string | null
    fecha: Date | null
    fechapago: Date | null
    _count: OrdenespagosCountAggregateOutputType | null
    _avg: OrdenespagosAvgAggregateOutputType | null
    _sum: OrdenespagosSumAggregateOutputType | null
    _min: OrdenespagosMinAggregateOutputType | null
    _max: OrdenespagosMaxAggregateOutputType | null
  }

  type GetOrdenespagosGroupByPayload<T extends OrdenespagosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrdenespagosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdenespagosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdenespagosGroupByOutputType[P]>
            : GetScalarType<T[P], OrdenespagosGroupByOutputType[P]>
        }
      >
    >


  export type ordenespagosSelect = {
    orden_pago_id?: boolean
    cliente_id?: boolean
    monto?: boolean
    codigo_web?: boolean
    status_id?: boolean
    customer?: boolean
    order_id?: boolean
    openpay_id?: boolean
    fecha?: boolean
    fechapago?: boolean
    status?: boolean | statusArgs
    clientes?: boolean | clientesArgs
  }


  export type ordenespagosInclude = {
    status?: boolean | statusArgs
    clientes?: boolean | clientesArgs
  }

  export type ordenespagosGetPayload<S extends boolean | null | undefined | ordenespagosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ordenespagos :
    S extends undefined ? never :
    S extends { include: any } & (ordenespagosArgs | ordenespagosFindManyArgs)
    ? ordenespagos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'status' ? statusGetPayload<S['include'][P]> | null :
        P extends 'clientes' ? clientesGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ordenespagosArgs | ordenespagosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'status' ? statusGetPayload<S['select'][P]> | null :
        P extends 'clientes' ? clientesGetPayload<S['select'][P]> | null :  P extends keyof ordenespagos ? ordenespagos[P] : never
  } 
      : ordenespagos


  type ordenespagosCountArgs = 
    Omit<ordenespagosFindManyArgs, 'select' | 'include'> & {
      select?: OrdenespagosCountAggregateInputType | true
    }

  export interface ordenespagosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Ordenespagos that matches the filter.
     * @param {ordenespagosFindUniqueArgs} args - Arguments to find a Ordenespagos
     * @example
     * // Get one Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordenespagosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ordenespagosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ordenespagos'> extends True ? Prisma__ordenespagosClient<ordenespagosGetPayload<T>> : Prisma__ordenespagosClient<ordenespagosGetPayload<T> | null, null>

    /**
     * Find one Ordenespagos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordenespagosFindUniqueOrThrowArgs} args - Arguments to find a Ordenespagos
     * @example
     * // Get one Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordenespagosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ordenespagosFindUniqueOrThrowArgs>
    ): Prisma__ordenespagosClient<ordenespagosGetPayload<T>>

    /**
     * Find the first Ordenespagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenespagosFindFirstArgs} args - Arguments to find a Ordenespagos
     * @example
     * // Get one Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordenespagosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ordenespagosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ordenespagos'> extends True ? Prisma__ordenespagosClient<ordenespagosGetPayload<T>> : Prisma__ordenespagosClient<ordenespagosGetPayload<T> | null, null>

    /**
     * Find the first Ordenespagos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenespagosFindFirstOrThrowArgs} args - Arguments to find a Ordenespagos
     * @example
     * // Get one Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordenespagosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ordenespagosFindFirstOrThrowArgs>
    ): Prisma__ordenespagosClient<ordenespagosGetPayload<T>>

    /**
     * Find zero or more Ordenespagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenespagosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.findMany()
     * 
     * // Get first 10 Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.findMany({ take: 10 })
     * 
     * // Only select the `orden_pago_id`
     * const ordenespagosWithOrden_pago_idOnly = await prisma.ordenespagos.findMany({ select: { orden_pago_id: true } })
     * 
    **/
    findMany<T extends ordenespagosFindManyArgs>(
      args?: SelectSubset<T, ordenespagosFindManyArgs>
    ): Prisma.PrismaPromise<Array<ordenespagosGetPayload<T>>>

    /**
     * Create a Ordenespagos.
     * @param {ordenespagosCreateArgs} args - Arguments to create a Ordenespagos.
     * @example
     * // Create one Ordenespagos
     * const Ordenespagos = await prisma.ordenespagos.create({
     *   data: {
     *     // ... data to create a Ordenespagos
     *   }
     * })
     * 
    **/
    create<T extends ordenespagosCreateArgs>(
      args: SelectSubset<T, ordenespagosCreateArgs>
    ): Prisma__ordenespagosClient<ordenespagosGetPayload<T>>

    /**
     * Create many Ordenespagos.
     *     @param {ordenespagosCreateManyArgs} args - Arguments to create many Ordenespagos.
     *     @example
     *     // Create many Ordenespagos
     *     const ordenespagos = await prisma.ordenespagos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordenespagosCreateManyArgs>(
      args?: SelectSubset<T, ordenespagosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ordenespagos.
     * @param {ordenespagosDeleteArgs} args - Arguments to delete one Ordenespagos.
     * @example
     * // Delete one Ordenespagos
     * const Ordenespagos = await prisma.ordenespagos.delete({
     *   where: {
     *     // ... filter to delete one Ordenespagos
     *   }
     * })
     * 
    **/
    delete<T extends ordenespagosDeleteArgs>(
      args: SelectSubset<T, ordenespagosDeleteArgs>
    ): Prisma__ordenespagosClient<ordenespagosGetPayload<T>>

    /**
     * Update one Ordenespagos.
     * @param {ordenespagosUpdateArgs} args - Arguments to update one Ordenespagos.
     * @example
     * // Update one Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordenespagosUpdateArgs>(
      args: SelectSubset<T, ordenespagosUpdateArgs>
    ): Prisma__ordenespagosClient<ordenespagosGetPayload<T>>

    /**
     * Delete zero or more Ordenespagos.
     * @param {ordenespagosDeleteManyArgs} args - Arguments to filter Ordenespagos to delete.
     * @example
     * // Delete a few Ordenespagos
     * const { count } = await prisma.ordenespagos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordenespagosDeleteManyArgs>(
      args?: SelectSubset<T, ordenespagosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ordenespagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenespagosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordenespagosUpdateManyArgs>(
      args: SelectSubset<T, ordenespagosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ordenespagos.
     * @param {ordenespagosUpsertArgs} args - Arguments to update or create a Ordenespagos.
     * @example
     * // Update or create a Ordenespagos
     * const ordenespagos = await prisma.ordenespagos.upsert({
     *   create: {
     *     // ... data to create a Ordenespagos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ordenespagos we want to update
     *   }
     * })
    **/
    upsert<T extends ordenespagosUpsertArgs>(
      args: SelectSubset<T, ordenespagosUpsertArgs>
    ): Prisma__ordenespagosClient<ordenespagosGetPayload<T>>

    /**
     * Count the number of Ordenespagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenespagosCountArgs} args - Arguments to filter Ordenespagos to count.
     * @example
     * // Count the number of Ordenespagos
     * const count = await prisma.ordenespagos.count({
     *   where: {
     *     // ... the filter for the Ordenespagos we want to count
     *   }
     * })
    **/
    count<T extends ordenespagosCountArgs>(
      args?: Subset<T, ordenespagosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdenespagosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ordenespagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdenespagosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdenespagosAggregateArgs>(args: Subset<T, OrdenespagosAggregateArgs>): Prisma.PrismaPromise<GetOrdenespagosAggregateType<T>>

    /**
     * Group by Ordenespagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdenespagosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdenespagosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdenespagosGroupByArgs['orderBy'] }
        : { orderBy?: OrdenespagosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdenespagosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdenespagosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ordenespagos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ordenespagosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    status<T extends statusArgs= {}>(args?: Subset<T, statusArgs>): Prisma__statusClient<statusGetPayload<T> | Null>;

    clientes<T extends clientesArgs= {}>(args?: Subset<T, clientesArgs>): Prisma__clientesClient<clientesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ordenespagos base type for findUnique actions
   */
  export type ordenespagosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * Filter, which ordenespagos to fetch.
     */
    where: ordenespagosWhereUniqueInput
  }

  /**
   * ordenespagos findUnique
   */
  export interface ordenespagosFindUniqueArgs extends ordenespagosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ordenespagos findUniqueOrThrow
   */
  export type ordenespagosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * Filter, which ordenespagos to fetch.
     */
    where: ordenespagosWhereUniqueInput
  }


  /**
   * ordenespagos base type for findFirst actions
   */
  export type ordenespagosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * Filter, which ordenespagos to fetch.
     */
    where?: ordenespagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordenespagos to fetch.
     */
    orderBy?: Enumerable<ordenespagosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ordenespagos.
     */
    cursor?: ordenespagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordenespagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordenespagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ordenespagos.
     */
    distinct?: Enumerable<OrdenespagosScalarFieldEnum>
  }

  /**
   * ordenespagos findFirst
   */
  export interface ordenespagosFindFirstArgs extends ordenespagosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ordenespagos findFirstOrThrow
   */
  export type ordenespagosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * Filter, which ordenespagos to fetch.
     */
    where?: ordenespagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordenespagos to fetch.
     */
    orderBy?: Enumerable<ordenespagosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ordenespagos.
     */
    cursor?: ordenespagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordenespagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordenespagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ordenespagos.
     */
    distinct?: Enumerable<OrdenespagosScalarFieldEnum>
  }


  /**
   * ordenespagos findMany
   */
  export type ordenespagosFindManyArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * Filter, which ordenespagos to fetch.
     */
    where?: ordenespagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordenespagos to fetch.
     */
    orderBy?: Enumerable<ordenespagosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ordenespagos.
     */
    cursor?: ordenespagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordenespagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordenespagos.
     */
    skip?: number
    distinct?: Enumerable<OrdenespagosScalarFieldEnum>
  }


  /**
   * ordenespagos create
   */
  export type ordenespagosCreateArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * The data needed to create a ordenespagos.
     */
    data: XOR<ordenespagosCreateInput, ordenespagosUncheckedCreateInput>
  }


  /**
   * ordenespagos createMany
   */
  export type ordenespagosCreateManyArgs = {
    /**
     * The data used to create many ordenespagos.
     */
    data: Enumerable<ordenespagosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ordenespagos update
   */
  export type ordenespagosUpdateArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * The data needed to update a ordenespagos.
     */
    data: XOR<ordenespagosUpdateInput, ordenespagosUncheckedUpdateInput>
    /**
     * Choose, which ordenespagos to update.
     */
    where: ordenespagosWhereUniqueInput
  }


  /**
   * ordenespagos updateMany
   */
  export type ordenespagosUpdateManyArgs = {
    /**
     * The data used to update ordenespagos.
     */
    data: XOR<ordenespagosUpdateManyMutationInput, ordenespagosUncheckedUpdateManyInput>
    /**
     * Filter which ordenespagos to update
     */
    where?: ordenespagosWhereInput
  }


  /**
   * ordenespagos upsert
   */
  export type ordenespagosUpsertArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * The filter to search for the ordenespagos to update in case it exists.
     */
    where: ordenespagosWhereUniqueInput
    /**
     * In case the ordenespagos found by the `where` argument doesn't exist, create a new ordenespagos with this data.
     */
    create: XOR<ordenespagosCreateInput, ordenespagosUncheckedCreateInput>
    /**
     * In case the ordenespagos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordenespagosUpdateInput, ordenespagosUncheckedUpdateInput>
  }


  /**
   * ordenespagos delete
   */
  export type ordenespagosDeleteArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
    /**
     * Filter which ordenespagos to delete.
     */
    where: ordenespagosWhereUniqueInput
  }


  /**
   * ordenespagos deleteMany
   */
  export type ordenespagosDeleteManyArgs = {
    /**
     * Filter which ordenespagos to delete
     */
    where?: ordenespagosWhereInput
  }


  /**
   * ordenespagos without action
   */
  export type ordenespagosArgs = {
    /**
     * Select specific fields to fetch from the ordenespagos
     */
    select?: ordenespagosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenespagosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClientesScalarFieldEnum: {
    cliente_id: 'cliente_id',
    nombre: 'nombre',
    apellidos: 'apellidos',
    telefono: 'telefono',
    email: 'email',
    user_id: 'user_id',
    fecha: 'fecha',
    activo: 'activo'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const OrdenespagosScalarFieldEnum: {
    orden_pago_id: 'orden_pago_id',
    cliente_id: 'cliente_id',
    monto: 'monto',
    codigo_web: 'codigo_web',
    status_id: 'status_id',
    customer: 'customer',
    order_id: 'order_id',
    openpay_id: 'openpay_id',
    fecha: 'fecha',
    fechapago: 'fechapago'
  };

  export type OrdenespagosScalarFieldEnum = (typeof OrdenespagosScalarFieldEnum)[keyof typeof OrdenespagosScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StatusScalarFieldEnum: {
    status_id: 'status_id',
    status: 'status'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TypesusersScalarFieldEnum: {
    typeuser_id: 'typeuser_id',
    typeuser: 'typeuser'
  };

  export type TypesusersScalarFieldEnum = (typeof TypesusersScalarFieldEnum)[keyof typeof TypesusersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    password: 'password',
    typeuser_id: 'typeuser_id',
    email: 'email',
    active: 'active'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type typesusersWhereInput = {
    AND?: Enumerable<typesusersWhereInput>
    OR?: Enumerable<typesusersWhereInput>
    NOT?: Enumerable<typesusersWhereInput>
    typeuser_id?: IntFilter | number
    typeuser?: StringNullableFilter | string | null
    users?: UsersListRelationFilter
  }

  export type typesusersOrderByWithRelationInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
    users?: usersOrderByRelationAggregateInput
  }

  export type typesusersWhereUniqueInput = {
    typeuser_id?: number
  }

  export type typesusersOrderByWithAggregationInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
    _count?: typesusersCountOrderByAggregateInput
    _avg?: typesusersAvgOrderByAggregateInput
    _max?: typesusersMaxOrderByAggregateInput
    _min?: typesusersMinOrderByAggregateInput
    _sum?: typesusersSumOrderByAggregateInput
  }

  export type typesusersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<typesusersScalarWhereWithAggregatesInput>
    OR?: Enumerable<typesusersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<typesusersScalarWhereWithAggregatesInput>
    typeuser_id?: IntWithAggregatesFilter | number
    typeuser?: StringNullableWithAggregatesFilter | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    user_id?: IntFilter | number
    name?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    typeuser_id?: IntNullableFilter | number | null
    email?: StringNullableFilter | string | null
    active?: IntNullableFilter | number | null
    clientes?: ClientesListRelationFilter
    typesusers?: XOR<TypesusersRelationFilter, typesusersWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    email?: SortOrder
    active?: SortOrder
    clientes?: clientesOrderByRelationAggregateInput
    typesusers?: typesusersOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = {
    user_id?: number
  }

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    email?: SortOrder
    active?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    typeuser_id?: IntNullableWithAggregatesFilter | number | null
    email?: StringNullableWithAggregatesFilter | string | null
    active?: IntNullableWithAggregatesFilter | number | null
  }

  export type clientesWhereInput = {
    AND?: Enumerable<clientesWhereInput>
    OR?: Enumerable<clientesWhereInput>
    NOT?: Enumerable<clientesWhereInput>
    cliente_id?: IntFilter | number
    nombre?: StringFilter | string
    apellidos?: StringNullableFilter | string | null
    telefono?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    user_id?: IntNullableFilter | number | null
    fecha?: DateTimeNullableFilter | Date | string | null
    activo?: IntNullableFilter | number | null
    ordenespagos?: OrdenespagosListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type clientesOrderByWithRelationInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    fecha?: SortOrder
    activo?: SortOrder
    ordenespagos?: ordenespagosOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
  }

  export type clientesWhereUniqueInput = {
    cliente_id?: number
  }

  export type clientesOrderByWithAggregationInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    fecha?: SortOrder
    activo?: SortOrder
    _count?: clientesCountOrderByAggregateInput
    _avg?: clientesAvgOrderByAggregateInput
    _max?: clientesMaxOrderByAggregateInput
    _min?: clientesMinOrderByAggregateInput
    _sum?: clientesSumOrderByAggregateInput
  }

  export type clientesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientesScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientesScalarWhereWithAggregatesInput>
    cliente_id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    apellidos?: StringNullableWithAggregatesFilter | string | null
    telefono?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    user_id?: IntNullableWithAggregatesFilter | number | null
    fecha?: DateTimeNullableWithAggregatesFilter | Date | string | null
    activo?: IntNullableWithAggregatesFilter | number | null
  }

  export type statusWhereInput = {
    AND?: Enumerable<statusWhereInput>
    OR?: Enumerable<statusWhereInput>
    NOT?: Enumerable<statusWhereInput>
    status_id?: IntFilter | number
    status?: StringNullableFilter | string | null
    ordenespagos?: OrdenespagosListRelationFilter
  }

  export type statusOrderByWithRelationInput = {
    status_id?: SortOrder
    status?: SortOrder
    ordenespagos?: ordenespagosOrderByRelationAggregateInput
  }

  export type statusWhereUniqueInput = {
    status_id?: number
  }

  export type statusOrderByWithAggregationInput = {
    status_id?: SortOrder
    status?: SortOrder
    _count?: statusCountOrderByAggregateInput
    _avg?: statusAvgOrderByAggregateInput
    _max?: statusMaxOrderByAggregateInput
    _min?: statusMinOrderByAggregateInput
    _sum?: statusSumOrderByAggregateInput
  }

  export type statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<statusScalarWhereWithAggregatesInput>
    status_id?: IntWithAggregatesFilter | number
    status?: StringNullableWithAggregatesFilter | string | null
  }

  export type ordenespagosWhereInput = {
    AND?: Enumerable<ordenespagosWhereInput>
    OR?: Enumerable<ordenespagosWhereInput>
    NOT?: Enumerable<ordenespagosWhereInput>
    orden_pago_id?: IntFilter | number
    cliente_id?: IntFilter | number
    monto?: FloatFilter | number
    codigo_web?: StringNullableFilter | string | null
    status_id?: IntNullableFilter | number | null
    customer?: StringNullableFilter | string | null
    order_id?: StringNullableFilter | string | null
    openpay_id?: StringNullableFilter | string | null
    fecha?: DateTimeNullableFilter | Date | string | null
    fechapago?: DateTimeNullableFilter | Date | string | null
    status?: XOR<StatusRelationFilter, statusWhereInput> | null
    clientes?: XOR<ClientesRelationFilter, clientesWhereInput> | null
  }

  export type ordenespagosOrderByWithRelationInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    codigo_web?: SortOrder
    status_id?: SortOrder
    customer?: SortOrder
    order_id?: SortOrder
    openpay_id?: SortOrder
    fecha?: SortOrder
    fechapago?: SortOrder
    status?: statusOrderByWithRelationInput
    clientes?: clientesOrderByWithRelationInput
  }

  export type ordenespagosWhereUniqueInput = {
    orden_pago_id?: number
  }

  export type ordenespagosOrderByWithAggregationInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    codigo_web?: SortOrder
    status_id?: SortOrder
    customer?: SortOrder
    order_id?: SortOrder
    openpay_id?: SortOrder
    fecha?: SortOrder
    fechapago?: SortOrder
    _count?: ordenespagosCountOrderByAggregateInput
    _avg?: ordenespagosAvgOrderByAggregateInput
    _max?: ordenespagosMaxOrderByAggregateInput
    _min?: ordenespagosMinOrderByAggregateInput
    _sum?: ordenespagosSumOrderByAggregateInput
  }

  export type ordenespagosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ordenespagosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ordenespagosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ordenespagosScalarWhereWithAggregatesInput>
    orden_pago_id?: IntWithAggregatesFilter | number
    cliente_id?: IntWithAggregatesFilter | number
    monto?: FloatWithAggregatesFilter | number
    codigo_web?: StringNullableWithAggregatesFilter | string | null
    status_id?: IntNullableWithAggregatesFilter | number | null
    customer?: StringNullableWithAggregatesFilter | string | null
    order_id?: StringNullableWithAggregatesFilter | string | null
    openpay_id?: StringNullableWithAggregatesFilter | string | null
    fecha?: DateTimeNullableWithAggregatesFilter | Date | string | null
    fechapago?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type typesusersCreateInput = {
    typeuser?: string | null
    users?: usersCreateNestedManyWithoutTypesusersInput
  }

  export type typesusersUncheckedCreateInput = {
    typeuser_id?: number
    typeuser?: string | null
    users?: usersUncheckedCreateNestedManyWithoutTypesusersInput
  }

  export type typesusersUpdateInput = {
    typeuser?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateManyWithoutTypesusersNestedInput
  }

  export type typesusersUncheckedUpdateInput = {
    typeuser_id?: IntFieldUpdateOperationsInput | number
    typeuser?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUncheckedUpdateManyWithoutTypesusersNestedInput
  }

  export type typesusersCreateManyInput = {
    typeuser_id?: number
    typeuser?: string | null
  }

  export type typesusersUpdateManyMutationInput = {
    typeuser?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type typesusersUncheckedUpdateManyInput = {
    typeuser_id?: IntFieldUpdateOperationsInput | number
    typeuser?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    name?: string | null
    password?: string | null
    email?: string | null
    active?: number | null
    clientes?: clientesCreateNestedManyWithoutUsersInput
    typesusers?: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    name?: string | null
    password?: string | null
    typeuser_id?: number | null
    email?: string | null
    active?: number | null
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    clientes?: clientesUpdateManyWithoutUsersNestedInput
    typesusers?: typesusersUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    typeuser_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    name?: string | null
    password?: string | null
    typeuser_id?: number | null
    email?: string | null
    active?: number | null
  }

  export type usersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    typeuser_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesCreateInput = {
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    fecha?: Date | string | null
    activo?: number | null
    ordenespagos?: ordenespagosCreateNestedManyWithoutClientesInput
    users?: usersCreateNestedOneWithoutClientesInput
  }

  export type clientesUncheckedCreateInput = {
    cliente_id?: number
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    user_id?: number | null
    fecha?: Date | string | null
    activo?: number | null
    ordenespagos?: ordenespagosUncheckedCreateNestedManyWithoutClientesInput
  }

  export type clientesUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
    ordenespagos?: ordenespagosUpdateManyWithoutClientesNestedInput
    users?: usersUpdateOneWithoutClientesNestedInput
  }

  export type clientesUncheckedUpdateInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
    ordenespagos?: ordenespagosUncheckedUpdateManyWithoutClientesNestedInput
  }

  export type clientesCreateManyInput = {
    cliente_id?: number
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    user_id?: number | null
    fecha?: Date | string | null
    activo?: number | null
  }

  export type clientesUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateManyInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type statusCreateInput = {
    status?: string | null
    ordenespagos?: ordenespagosCreateNestedManyWithoutStatusInput
  }

  export type statusUncheckedCreateInput = {
    status_id?: number
    status?: string | null
    ordenespagos?: ordenespagosUncheckedCreateNestedManyWithoutStatusInput
  }

  export type statusUpdateInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    ordenespagos?: ordenespagosUpdateManyWithoutStatusNestedInput
  }

  export type statusUncheckedUpdateInput = {
    status_id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    ordenespagos?: ordenespagosUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type statusCreateManyInput = {
    status_id?: number
    status?: string | null
  }

  export type statusUpdateManyMutationInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type statusUncheckedUpdateManyInput = {
    status_id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ordenespagosCreateInput = {
    monto: number
    codigo_web?: string | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
    status?: statusCreateNestedOneWithoutOrdenespagosInput
    clientes?: clientesCreateNestedOneWithoutOrdenespagosInput
  }

  export type ordenespagosUncheckedCreateInput = {
    orden_pago_id?: number
    cliente_id: number
    monto: number
    codigo_web?: string | null
    status_id?: number | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
  }

  export type ordenespagosUpdateInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: statusUpdateOneWithoutOrdenespagosNestedInput
    clientes?: clientesUpdateOneWithoutOrdenespagosNestedInput
  }

  export type ordenespagosUncheckedUpdateInput = {
    orden_pago_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordenespagosCreateManyInput = {
    orden_pago_id?: number
    cliente_id: number
    monto: number
    codigo_web?: string | null
    status_id?: number | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
  }

  export type ordenespagosUpdateManyMutationInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordenespagosUncheckedUpdateManyInput = {
    orden_pago_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type typesusersCountOrderByAggregateInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
  }

  export type typesusersAvgOrderByAggregateInput = {
    typeuser_id?: SortOrder
  }

  export type typesusersMaxOrderByAggregateInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
  }

  export type typesusersMinOrderByAggregateInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
  }

  export type typesusersSumOrderByAggregateInput = {
    typeuser_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ClientesListRelationFilter = {
    every?: clientesWhereInput
    some?: clientesWhereInput
    none?: clientesWhereInput
  }

  export type TypesusersRelationFilter = {
    is?: typesusersWhereInput | null
    isNot?: typesusersWhereInput | null
  }

  export type clientesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    email?: SortOrder
    active?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
    typeuser_id?: SortOrder
    active?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    email?: SortOrder
    active?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    email?: SortOrder
    active?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
    typeuser_id?: SortOrder
    active?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type OrdenespagosListRelationFilter = {
    every?: ordenespagosWhereInput
    some?: ordenespagosWhereInput
    none?: ordenespagosWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type ordenespagosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientesCountOrderByAggregateInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    fecha?: SortOrder
    activo?: SortOrder
  }

  export type clientesAvgOrderByAggregateInput = {
    cliente_id?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type clientesMaxOrderByAggregateInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    fecha?: SortOrder
    activo?: SortOrder
  }

  export type clientesMinOrderByAggregateInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    fecha?: SortOrder
    activo?: SortOrder
  }

  export type clientesSumOrderByAggregateInput = {
    cliente_id?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type statusCountOrderByAggregateInput = {
    status_id?: SortOrder
    status?: SortOrder
  }

  export type statusAvgOrderByAggregateInput = {
    status_id?: SortOrder
  }

  export type statusMaxOrderByAggregateInput = {
    status_id?: SortOrder
    status?: SortOrder
  }

  export type statusMinOrderByAggregateInput = {
    status_id?: SortOrder
    status?: SortOrder
  }

  export type statusSumOrderByAggregateInput = {
    status_id?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type StatusRelationFilter = {
    is?: statusWhereInput | null
    isNot?: statusWhereInput | null
  }

  export type ClientesRelationFilter = {
    is?: clientesWhereInput | null
    isNot?: clientesWhereInput | null
  }

  export type ordenespagosCountOrderByAggregateInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    codigo_web?: SortOrder
    status_id?: SortOrder
    customer?: SortOrder
    order_id?: SortOrder
    openpay_id?: SortOrder
    fecha?: SortOrder
    fechapago?: SortOrder
  }

  export type ordenespagosAvgOrderByAggregateInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    status_id?: SortOrder
  }

  export type ordenespagosMaxOrderByAggregateInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    codigo_web?: SortOrder
    status_id?: SortOrder
    customer?: SortOrder
    order_id?: SortOrder
    openpay_id?: SortOrder
    fecha?: SortOrder
    fechapago?: SortOrder
  }

  export type ordenespagosMinOrderByAggregateInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    codigo_web?: SortOrder
    status_id?: SortOrder
    customer?: SortOrder
    order_id?: SortOrder
    openpay_id?: SortOrder
    fecha?: SortOrder
    fechapago?: SortOrder
  }

  export type ordenespagosSumOrderByAggregateInput = {
    orden_pago_id?: SortOrder
    cliente_id?: SortOrder
    monto?: SortOrder
    status_id?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type usersCreateNestedManyWithoutTypesusersInput = {
    create?: XOR<Enumerable<usersCreateWithoutTypesusersInput>, Enumerable<usersUncheckedCreateWithoutTypesusersInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutTypesusersInput>
    createMany?: usersCreateManyTypesusersInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type usersUncheckedCreateNestedManyWithoutTypesusersInput = {
    create?: XOR<Enumerable<usersCreateWithoutTypesusersInput>, Enumerable<usersUncheckedCreateWithoutTypesusersInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutTypesusersInput>
    createMany?: usersCreateManyTypesusersInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type usersUpdateManyWithoutTypesusersNestedInput = {
    create?: XOR<Enumerable<usersCreateWithoutTypesusersInput>, Enumerable<usersUncheckedCreateWithoutTypesusersInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutTypesusersInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutTypesusersInput>
    createMany?: usersCreateManyTypesusersInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutTypesusersInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutTypesusersInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUncheckedUpdateManyWithoutTypesusersNestedInput = {
    create?: XOR<Enumerable<usersCreateWithoutTypesusersInput>, Enumerable<usersUncheckedCreateWithoutTypesusersInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutTypesusersInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutTypesusersInput>
    createMany?: usersCreateManyTypesusersInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutTypesusersInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutTypesusersInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type clientesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<clientesCreateWithoutUsersInput>, Enumerable<clientesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutUsersInput>
    createMany?: clientesCreateManyUsersInputEnvelope
    connect?: Enumerable<clientesWhereUniqueInput>
  }

  export type typesusersCreateNestedOneWithoutUsersInput = {
    create?: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: typesusersCreateOrConnectWithoutUsersInput
    connect?: typesusersWhereUniqueInput
  }

  export type clientesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<clientesCreateWithoutUsersInput>, Enumerable<clientesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutUsersInput>
    createMany?: clientesCreateManyUsersInputEnvelope
    connect?: Enumerable<clientesWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type clientesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<clientesCreateWithoutUsersInput>, Enumerable<clientesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<clientesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: clientesCreateManyUsersInputEnvelope
    set?: Enumerable<clientesWhereUniqueInput>
    disconnect?: Enumerable<clientesWhereUniqueInput>
    delete?: Enumerable<clientesWhereUniqueInput>
    connect?: Enumerable<clientesWhereUniqueInput>
    update?: Enumerable<clientesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<clientesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<clientesScalarWhereInput>
  }

  export type typesusersUpdateOneWithoutUsersNestedInput = {
    create?: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: typesusersCreateOrConnectWithoutUsersInput
    upsert?: typesusersUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: typesusersWhereUniqueInput
    update?: XOR<typesusersUpdateWithoutUsersInput, typesusersUncheckedUpdateWithoutUsersInput>
  }

  export type clientesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<clientesCreateWithoutUsersInput>, Enumerable<clientesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<clientesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: clientesCreateManyUsersInputEnvelope
    set?: Enumerable<clientesWhereUniqueInput>
    disconnect?: Enumerable<clientesWhereUniqueInput>
    delete?: Enumerable<clientesWhereUniqueInput>
    connect?: Enumerable<clientesWhereUniqueInput>
    update?: Enumerable<clientesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<clientesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<clientesScalarWhereInput>
  }

  export type ordenespagosCreateNestedManyWithoutClientesInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutClientesInput>, Enumerable<ordenespagosUncheckedCreateWithoutClientesInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutClientesInput>
    createMany?: ordenespagosCreateManyClientesInputEnvelope
    connect?: Enumerable<ordenespagosWhereUniqueInput>
  }

  export type usersCreateNestedOneWithoutClientesInput = {
    create?: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
    connectOrCreate?: usersCreateOrConnectWithoutClientesInput
    connect?: usersWhereUniqueInput
  }

  export type ordenespagosUncheckedCreateNestedManyWithoutClientesInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutClientesInput>, Enumerable<ordenespagosUncheckedCreateWithoutClientesInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutClientesInput>
    createMany?: ordenespagosCreateManyClientesInputEnvelope
    connect?: Enumerable<ordenespagosWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ordenespagosUpdateManyWithoutClientesNestedInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutClientesInput>, Enumerable<ordenespagosUncheckedCreateWithoutClientesInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutClientesInput>
    upsert?: Enumerable<ordenespagosUpsertWithWhereUniqueWithoutClientesInput>
    createMany?: ordenespagosCreateManyClientesInputEnvelope
    set?: Enumerable<ordenespagosWhereUniqueInput>
    disconnect?: Enumerable<ordenespagosWhereUniqueInput>
    delete?: Enumerable<ordenespagosWhereUniqueInput>
    connect?: Enumerable<ordenespagosWhereUniqueInput>
    update?: Enumerable<ordenespagosUpdateWithWhereUniqueWithoutClientesInput>
    updateMany?: Enumerable<ordenespagosUpdateManyWithWhereWithoutClientesInput>
    deleteMany?: Enumerable<ordenespagosScalarWhereInput>
  }

  export type usersUpdateOneWithoutClientesNestedInput = {
    create?: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
    connectOrCreate?: usersCreateOrConnectWithoutClientesInput
    upsert?: usersUpsertWithoutClientesInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutClientesInput, usersUncheckedUpdateWithoutClientesInput>
  }

  export type ordenespagosUncheckedUpdateManyWithoutClientesNestedInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutClientesInput>, Enumerable<ordenespagosUncheckedCreateWithoutClientesInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutClientesInput>
    upsert?: Enumerable<ordenespagosUpsertWithWhereUniqueWithoutClientesInput>
    createMany?: ordenespagosCreateManyClientesInputEnvelope
    set?: Enumerable<ordenespagosWhereUniqueInput>
    disconnect?: Enumerable<ordenespagosWhereUniqueInput>
    delete?: Enumerable<ordenespagosWhereUniqueInput>
    connect?: Enumerable<ordenespagosWhereUniqueInput>
    update?: Enumerable<ordenespagosUpdateWithWhereUniqueWithoutClientesInput>
    updateMany?: Enumerable<ordenespagosUpdateManyWithWhereWithoutClientesInput>
    deleteMany?: Enumerable<ordenespagosScalarWhereInput>
  }

  export type ordenespagosCreateNestedManyWithoutStatusInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutStatusInput>, Enumerable<ordenespagosUncheckedCreateWithoutStatusInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutStatusInput>
    createMany?: ordenespagosCreateManyStatusInputEnvelope
    connect?: Enumerable<ordenespagosWhereUniqueInput>
  }

  export type ordenespagosUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutStatusInput>, Enumerable<ordenespagosUncheckedCreateWithoutStatusInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutStatusInput>
    createMany?: ordenespagosCreateManyStatusInputEnvelope
    connect?: Enumerable<ordenespagosWhereUniqueInput>
  }

  export type ordenespagosUpdateManyWithoutStatusNestedInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutStatusInput>, Enumerable<ordenespagosUncheckedCreateWithoutStatusInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutStatusInput>
    upsert?: Enumerable<ordenespagosUpsertWithWhereUniqueWithoutStatusInput>
    createMany?: ordenespagosCreateManyStatusInputEnvelope
    set?: Enumerable<ordenespagosWhereUniqueInput>
    disconnect?: Enumerable<ordenespagosWhereUniqueInput>
    delete?: Enumerable<ordenespagosWhereUniqueInput>
    connect?: Enumerable<ordenespagosWhereUniqueInput>
    update?: Enumerable<ordenespagosUpdateWithWhereUniqueWithoutStatusInput>
    updateMany?: Enumerable<ordenespagosUpdateManyWithWhereWithoutStatusInput>
    deleteMany?: Enumerable<ordenespagosScalarWhereInput>
  }

  export type ordenespagosUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<Enumerable<ordenespagosCreateWithoutStatusInput>, Enumerable<ordenespagosUncheckedCreateWithoutStatusInput>>
    connectOrCreate?: Enumerable<ordenespagosCreateOrConnectWithoutStatusInput>
    upsert?: Enumerable<ordenespagosUpsertWithWhereUniqueWithoutStatusInput>
    createMany?: ordenespagosCreateManyStatusInputEnvelope
    set?: Enumerable<ordenespagosWhereUniqueInput>
    disconnect?: Enumerable<ordenespagosWhereUniqueInput>
    delete?: Enumerable<ordenespagosWhereUniqueInput>
    connect?: Enumerable<ordenespagosWhereUniqueInput>
    update?: Enumerable<ordenespagosUpdateWithWhereUniqueWithoutStatusInput>
    updateMany?: Enumerable<ordenespagosUpdateManyWithWhereWithoutStatusInput>
    deleteMany?: Enumerable<ordenespagosScalarWhereInput>
  }

  export type statusCreateNestedOneWithoutOrdenespagosInput = {
    create?: XOR<statusCreateWithoutOrdenespagosInput, statusUncheckedCreateWithoutOrdenespagosInput>
    connectOrCreate?: statusCreateOrConnectWithoutOrdenespagosInput
    connect?: statusWhereUniqueInput
  }

  export type clientesCreateNestedOneWithoutOrdenespagosInput = {
    create?: XOR<clientesCreateWithoutOrdenespagosInput, clientesUncheckedCreateWithoutOrdenespagosInput>
    connectOrCreate?: clientesCreateOrConnectWithoutOrdenespagosInput
    connect?: clientesWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type statusUpdateOneWithoutOrdenespagosNestedInput = {
    create?: XOR<statusCreateWithoutOrdenespagosInput, statusUncheckedCreateWithoutOrdenespagosInput>
    connectOrCreate?: statusCreateOrConnectWithoutOrdenespagosInput
    upsert?: statusUpsertWithoutOrdenespagosInput
    disconnect?: boolean
    delete?: boolean
    connect?: statusWhereUniqueInput
    update?: XOR<statusUpdateWithoutOrdenespagosInput, statusUncheckedUpdateWithoutOrdenespagosInput>
  }

  export type clientesUpdateOneWithoutOrdenespagosNestedInput = {
    create?: XOR<clientesCreateWithoutOrdenespagosInput, clientesUncheckedCreateWithoutOrdenespagosInput>
    connectOrCreate?: clientesCreateOrConnectWithoutOrdenespagosInput
    upsert?: clientesUpsertWithoutOrdenespagosInput
    disconnect?: boolean
    delete?: boolean
    connect?: clientesWhereUniqueInput
    update?: XOR<clientesUpdateWithoutOrdenespagosInput, clientesUncheckedUpdateWithoutOrdenespagosInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type usersCreateWithoutTypesusersInput = {
    name?: string | null
    password?: string | null
    email?: string | null
    active?: number | null
    clientes?: clientesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutTypesusersInput = {
    user_id?: number
    name?: string | null
    password?: string | null
    email?: string | null
    active?: number | null
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutTypesusersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput>
  }

  export type usersCreateManyTypesusersInputEnvelope = {
    data: Enumerable<usersCreateManyTypesusersInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithWhereUniqueWithoutTypesusersInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutTypesusersInput, usersUncheckedUpdateWithoutTypesusersInput>
    create: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput>
  }

  export type usersUpdateWithWhereUniqueWithoutTypesusersInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutTypesusersInput, usersUncheckedUpdateWithoutTypesusersInput>
  }

  export type usersUpdateManyWithWhereWithoutTypesusersInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type usersScalarWhereInput = {
    AND?: Enumerable<usersScalarWhereInput>
    OR?: Enumerable<usersScalarWhereInput>
    NOT?: Enumerable<usersScalarWhereInput>
    user_id?: IntFilter | number
    name?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    typeuser_id?: IntNullableFilter | number | null
    email?: StringNullableFilter | string | null
    active?: IntNullableFilter | number | null
  }

  export type clientesCreateWithoutUsersInput = {
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    fecha?: Date | string | null
    activo?: number | null
    ordenespagos?: ordenespagosCreateNestedManyWithoutClientesInput
  }

  export type clientesUncheckedCreateWithoutUsersInput = {
    cliente_id?: number
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    fecha?: Date | string | null
    activo?: number | null
    ordenespagos?: ordenespagosUncheckedCreateNestedManyWithoutClientesInput
  }

  export type clientesCreateOrConnectWithoutUsersInput = {
    where: clientesWhereUniqueInput
    create: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput>
  }

  export type clientesCreateManyUsersInputEnvelope = {
    data: Enumerable<clientesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type typesusersCreateWithoutUsersInput = {
    typeuser?: string | null
  }

  export type typesusersUncheckedCreateWithoutUsersInput = {
    typeuser_id?: number
    typeuser?: string | null
  }

  export type typesusersCreateOrConnectWithoutUsersInput = {
    where: typesusersWhereUniqueInput
    create: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
  }

  export type clientesUpsertWithWhereUniqueWithoutUsersInput = {
    where: clientesWhereUniqueInput
    update: XOR<clientesUpdateWithoutUsersInput, clientesUncheckedUpdateWithoutUsersInput>
    create: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput>
  }

  export type clientesUpdateWithWhereUniqueWithoutUsersInput = {
    where: clientesWhereUniqueInput
    data: XOR<clientesUpdateWithoutUsersInput, clientesUncheckedUpdateWithoutUsersInput>
  }

  export type clientesUpdateManyWithWhereWithoutUsersInput = {
    where: clientesScalarWhereInput
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyWithoutClientesInput>
  }

  export type clientesScalarWhereInput = {
    AND?: Enumerable<clientesScalarWhereInput>
    OR?: Enumerable<clientesScalarWhereInput>
    NOT?: Enumerable<clientesScalarWhereInput>
    cliente_id?: IntFilter | number
    nombre?: StringFilter | string
    apellidos?: StringNullableFilter | string | null
    telefono?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    user_id?: IntNullableFilter | number | null
    fecha?: DateTimeNullableFilter | Date | string | null
    activo?: IntNullableFilter | number | null
  }

  export type typesusersUpsertWithoutUsersInput = {
    update: XOR<typesusersUpdateWithoutUsersInput, typesusersUncheckedUpdateWithoutUsersInput>
    create: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
  }

  export type typesusersUpdateWithoutUsersInput = {
    typeuser?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type typesusersUncheckedUpdateWithoutUsersInput = {
    typeuser_id?: IntFieldUpdateOperationsInput | number
    typeuser?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ordenespagosCreateWithoutClientesInput = {
    monto: number
    codigo_web?: string | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
    status?: statusCreateNestedOneWithoutOrdenespagosInput
  }

  export type ordenespagosUncheckedCreateWithoutClientesInput = {
    orden_pago_id?: number
    monto: number
    codigo_web?: string | null
    status_id?: number | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
  }

  export type ordenespagosCreateOrConnectWithoutClientesInput = {
    where: ordenespagosWhereUniqueInput
    create: XOR<ordenespagosCreateWithoutClientesInput, ordenespagosUncheckedCreateWithoutClientesInput>
  }

  export type ordenespagosCreateManyClientesInputEnvelope = {
    data: Enumerable<ordenespagosCreateManyClientesInput>
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutClientesInput = {
    name?: string | null
    password?: string | null
    email?: string | null
    active?: number | null
    typesusers?: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutClientesInput = {
    user_id?: number
    name?: string | null
    password?: string | null
    typeuser_id?: number | null
    email?: string | null
    active?: number | null
  }

  export type usersCreateOrConnectWithoutClientesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
  }

  export type ordenespagosUpsertWithWhereUniqueWithoutClientesInput = {
    where: ordenespagosWhereUniqueInput
    update: XOR<ordenespagosUpdateWithoutClientesInput, ordenespagosUncheckedUpdateWithoutClientesInput>
    create: XOR<ordenespagosCreateWithoutClientesInput, ordenespagosUncheckedCreateWithoutClientesInput>
  }

  export type ordenespagosUpdateWithWhereUniqueWithoutClientesInput = {
    where: ordenespagosWhereUniqueInput
    data: XOR<ordenespagosUpdateWithoutClientesInput, ordenespagosUncheckedUpdateWithoutClientesInput>
  }

  export type ordenespagosUpdateManyWithWhereWithoutClientesInput = {
    where: ordenespagosScalarWhereInput
    data: XOR<ordenespagosUpdateManyMutationInput, ordenespagosUncheckedUpdateManyWithoutOrdenespagosInput>
  }

  export type ordenespagosScalarWhereInput = {
    AND?: Enumerable<ordenespagosScalarWhereInput>
    OR?: Enumerable<ordenespagosScalarWhereInput>
    NOT?: Enumerable<ordenespagosScalarWhereInput>
    orden_pago_id?: IntFilter | number
    cliente_id?: IntFilter | number
    monto?: FloatFilter | number
    codigo_web?: StringNullableFilter | string | null
    status_id?: IntNullableFilter | number | null
    customer?: StringNullableFilter | string | null
    order_id?: StringNullableFilter | string | null
    openpay_id?: StringNullableFilter | string | null
    fecha?: DateTimeNullableFilter | Date | string | null
    fechapago?: DateTimeNullableFilter | Date | string | null
  }

  export type usersUpsertWithoutClientesInput = {
    update: XOR<usersUpdateWithoutClientesInput, usersUncheckedUpdateWithoutClientesInput>
    create: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
  }

  export type usersUpdateWithoutClientesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    typesusers?: typesusersUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutClientesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    typeuser_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ordenespagosCreateWithoutStatusInput = {
    monto: number
    codigo_web?: string | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
    clientes?: clientesCreateNestedOneWithoutOrdenespagosInput
  }

  export type ordenespagosUncheckedCreateWithoutStatusInput = {
    orden_pago_id?: number
    cliente_id: number
    monto: number
    codigo_web?: string | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
  }

  export type ordenespagosCreateOrConnectWithoutStatusInput = {
    where: ordenespagosWhereUniqueInput
    create: XOR<ordenespagosCreateWithoutStatusInput, ordenespagosUncheckedCreateWithoutStatusInput>
  }

  export type ordenespagosCreateManyStatusInputEnvelope = {
    data: Enumerable<ordenespagosCreateManyStatusInput>
    skipDuplicates?: boolean
  }

  export type ordenespagosUpsertWithWhereUniqueWithoutStatusInput = {
    where: ordenespagosWhereUniqueInput
    update: XOR<ordenespagosUpdateWithoutStatusInput, ordenespagosUncheckedUpdateWithoutStatusInput>
    create: XOR<ordenespagosCreateWithoutStatusInput, ordenespagosUncheckedCreateWithoutStatusInput>
  }

  export type ordenespagosUpdateWithWhereUniqueWithoutStatusInput = {
    where: ordenespagosWhereUniqueInput
    data: XOR<ordenespagosUpdateWithoutStatusInput, ordenespagosUncheckedUpdateWithoutStatusInput>
  }

  export type ordenespagosUpdateManyWithWhereWithoutStatusInput = {
    where: ordenespagosScalarWhereInput
    data: XOR<ordenespagosUpdateManyMutationInput, ordenespagosUncheckedUpdateManyWithoutOrdenespagosInput>
  }

  export type statusCreateWithoutOrdenespagosInput = {
    status?: string | null
  }

  export type statusUncheckedCreateWithoutOrdenespagosInput = {
    status_id?: number
    status?: string | null
  }

  export type statusCreateOrConnectWithoutOrdenespagosInput = {
    where: statusWhereUniqueInput
    create: XOR<statusCreateWithoutOrdenespagosInput, statusUncheckedCreateWithoutOrdenespagosInput>
  }

  export type clientesCreateWithoutOrdenespagosInput = {
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    fecha?: Date | string | null
    activo?: number | null
    users?: usersCreateNestedOneWithoutClientesInput
  }

  export type clientesUncheckedCreateWithoutOrdenespagosInput = {
    cliente_id?: number
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    user_id?: number | null
    fecha?: Date | string | null
    activo?: number | null
  }

  export type clientesCreateOrConnectWithoutOrdenespagosInput = {
    where: clientesWhereUniqueInput
    create: XOR<clientesCreateWithoutOrdenespagosInput, clientesUncheckedCreateWithoutOrdenespagosInput>
  }

  export type statusUpsertWithoutOrdenespagosInput = {
    update: XOR<statusUpdateWithoutOrdenespagosInput, statusUncheckedUpdateWithoutOrdenespagosInput>
    create: XOR<statusCreateWithoutOrdenespagosInput, statusUncheckedCreateWithoutOrdenespagosInput>
  }

  export type statusUpdateWithoutOrdenespagosInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type statusUncheckedUpdateWithoutOrdenespagosInput = {
    status_id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientesUpsertWithoutOrdenespagosInput = {
    update: XOR<clientesUpdateWithoutOrdenespagosInput, clientesUncheckedUpdateWithoutOrdenespagosInput>
    create: XOR<clientesCreateWithoutOrdenespagosInput, clientesUncheckedCreateWithoutOrdenespagosInput>
  }

  export type clientesUpdateWithoutOrdenespagosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
    users?: usersUpdateOneWithoutClientesNestedInput
  }

  export type clientesUncheckedUpdateWithoutOrdenespagosInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersCreateManyTypesusersInput = {
    user_id?: number
    name?: string | null
    password?: string | null
    email?: string | null
    active?: number | null
  }

  export type usersUpdateWithoutTypesusersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    clientes?: clientesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutTypesusersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateManyWithoutUsersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesCreateManyUsersInput = {
    cliente_id?: number
    nombre: string
    apellidos?: string | null
    telefono?: string | null
    email?: string | null
    fecha?: Date | string | null
    activo?: number | null
  }

  export type clientesUpdateWithoutUsersInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
    ordenespagos?: ordenespagosUpdateManyWithoutClientesNestedInput
  }

  export type clientesUncheckedUpdateWithoutUsersInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
    ordenespagos?: ordenespagosUncheckedUpdateManyWithoutClientesNestedInput
  }

  export type clientesUncheckedUpdateManyWithoutClientesInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ordenespagosCreateManyClientesInput = {
    orden_pago_id?: number
    monto: number
    codigo_web?: string | null
    status_id?: number | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
  }

  export type ordenespagosUpdateWithoutClientesInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: statusUpdateOneWithoutOrdenespagosNestedInput
  }

  export type ordenespagosUncheckedUpdateWithoutClientesInput = {
    orden_pago_id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordenespagosUncheckedUpdateManyWithoutOrdenespagosInput = {
    orden_pago_id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordenespagosCreateManyStatusInput = {
    orden_pago_id?: number
    cliente_id: number
    monto: number
    codigo_web?: string | null
    customer?: string | null
    order_id?: string | null
    openpay_id?: string | null
    fecha?: Date | string | null
    fechapago?: Date | string | null
  }

  export type ordenespagosUpdateWithoutStatusInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientes?: clientesUpdateOneWithoutOrdenespagosNestedInput
  }

  export type ordenespagosUncheckedUpdateWithoutStatusInput = {
    orden_pago_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    codigo_web?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    openpay_id?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechapago?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}